<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on Elvis</title>
    <link>https://shuerwa.github.io/categories/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on Elvis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Fri, 10 May 2019 10:23:48 +0800</lastBuildDate>
    
	<atom:link href="https://shuerwa.github.io/categories/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JNI调用</title>
      <link>https://shuerwa.github.io/blog/2019-05/jni%E8%B0%83%E7%94%A8/</link>
      <pubDate>Fri, 10 May 2019 10:23:48 +0800</pubDate>
      
      <guid>https://shuerwa.github.io/blog/2019-05/jni%E8%B0%83%E7%94%A8/</guid>
      <description>Java JNI(Java Native Interface)调用C代码 linux 前言 之前在对接脱机终端动态二维码验签，需要在javaWeb中调用到C语言封装的动态so类库。本次记录是对本次经验的总结 java调用C代码总共分为5步 在com.gw.web.hpay.util.encrypt这个包下创建一个java类TestUseC.java,编写了一个native方法getNumber() 代码如下: package com.gw.web.hpay.util.encrypt; /** * @author Shugege * @Discription 调用C代码 * @Data 2018/9/28 * @Version 1.0.0 */ public class</description>
    </item>
    
    <item>
      <title>JVM调优</title>
      <link>https://shuerwa.github.io/blog/2019-05/jvm%E8%B0%83%E4%BC%98/</link>
      <pubDate>Fri, 10 May 2019 10:23:48 +0800</pubDate>
      
      <guid>https://shuerwa.github.io/blog/2019-05/jvm%E8%B0%83%E4%BC%98/</guid>
      <description>原则 多数的Java应用不需要在服务器上进行GC优化； 多数导致GC问题的Java应用，都不是因为我们参数设置错误，而是代码问题； 在应用上线之前，先考虑将机器的JVM参数设置到最优（最适合）； 减少创建对象的数量； 减少使用全局变量和大对象； GC优化是到最后不得已才采用的手段； 在实际使用中，分析GC情况优化代码比优化GC参数要多得多； 目的 将转移到老年代的对象数量降低到最小 （降低full GC次数）； 减少fu</description>
    </item>
    
  </channel>
</rss>